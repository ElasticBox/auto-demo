if (!Detector['webgl']) {
    Detector['addGetWebGLMessage']();
};
var vp, cam, s, rr, garage;
var stats, isStats = false;
var ism = false,
    mdx = 0,
    mdy = 0,
    dp = 0,
    dy = 0,
    cam_p = 70,
    cam_y = 270,
    cmx = 0,
    cmy = 0,
    cam_d = 250;
var path = '';
var fullscreen = false;
var bm, rm;
var bc = 0x990000,
    rc = 0xeeeeee;
var cam_t = 'auto';
var c01, c02, c03, c04, c05, c06, c07, c08;
var cars = [];
var index = 0;
var dirY = 'down';
var cl;

function init() {
    vp = document['createElement']('div');
    document['body']['appendChild'](vp);
    cam = new THREE.PerspectiveCamera(60, window['innerWidth'] / window['innerHeight'], 1, 10000);
    s = new THREE.Scene();
    s['add'](cam);
    var _0x424ax26 = new THREE.DirectionalLight(0xffffff, 1, 1000);
    _0x424ax26['position']['set'](0, 1, 0)['normalize']();
    s['add'](_0x424ax26);
    cl = new THREE.SpotLight(0xffffff, 1, 1000);
    s['add'](cl);
    stats = new Stats();
    stats['domElement']['style']['position'] = 'absolute';
    stats['domElement']['style']['top'] = '40px';
    stats['domElement']['style']['left'] = '10px';
    var _0x424ax27 = 't_01/g_01/';
    var _0x424ax28 = [_0x424ax27 + 'px.jpg', _0x424ax27 + 'nx.jpg', _0x424ax27 + 'py.jpg', _0x424ax27 + 'ny.jpg', _0x424ax27 + 'pz.jpg', _0x424ax27 + 'nz.jpg'];
    var _0x424ax29 = THREE['ImageUtils']['loadTextureCube'](_0x424ax28);
    garage = new THREE.Object3D();
    var _0x424ax2a = THREE['ImageUtils']['loadTexture'](path + 't_01/g_01/g01.jpg');
    _0x424ax2a['anisotropy'] = 8;
    var _0x424ax2b = new THREE.MeshBasicMaterial({
        map: _0x424ax2a
    });
    var _0x424ax2c = new THREE.JSONLoader(false);
    _0x424ax2c['load']('m_01/g_01/g01.js', function (_0x424ax2d) {
        var _0x424ax2e = new THREE.Mesh(_0x424ax2d, _0x424ax2b);
        _0x424ax2e['scale']['set'](0.9, 0.9, 0.9);
        _0x424ax2e['position']['y'] = -15;
        garage['add'](_0x424ax2e);
    });
    var _0x424ax2f = THREE['ImageUtils']['loadTexture']('t_01/g_01/f01.jpg');
    _0x424ax2f['wrapS'] = _0x424ax2f['wrapT'] = THREE['RepeatWrapping'];
    _0x424ax2f['repeat']['set'](10, 10);
    _0x424ax2f['anisotropy'] = 8;
    var _0x424ax30 = new THREE.Mesh(new THREE.PlaneGeometry(1100, 1100, 1, 1), new THREE.MeshPhongMaterial({
        map: _0x424ax2f,
        specular: 0x404040
    }));
    _0x424ax30['position']['y'] = -17;
    _0x424ax30['rotation']['x'] = -Math['PI'] / 2;
    garage['add'](_0x424ax30);
    var _0x424ax31 = new THREE.MeshBasicMaterial({
        map: THREE['ImageUtils']['loadTexture'](path + 't_01/g_01/fs01.png'),
        transparent: true
    });
    var _0x424ax32 = new THREE.Mesh(new THREE.PlaneGeometry(1100, 1100, 1, 1), _0x424ax31);
    _0x424ax32['position']['y'] = -16;
    _0x424ax32['rotation']['x'] = -Math['PI'] / 2;
    garage['add'](_0x424ax32);
    garage['rotation']['y'] = Math['PI'] / 2;
    s['add'](garage);
    rm = new THREE.MeshPhongMaterial({
        color: rc,
        reflectivity: 0.5,
        combine: THREE['MixOperation'],
        envMap: _0x424ax29,
        specular: 0xffffff
    });
    var _0x424ax33 = THREE['ImageUtils']['loadTexture'](path + 't_01/ap_01/w01.png');
    _0x424ax33['anisotropy'] = 8;
    var _0x424ax34 = new THREE.MeshBasicMaterial({
        map: _0x424ax33,
        transparent: true,
        diffuse: 0x000000,
        ambient: 0x000000,
        specular: 0x000000,
        emissive: 0x000000
    });
    bm = new THREE.MeshPhongMaterial({
        color: bc,
        reflectivity: 0.5,
        combine: THREE['MixOperation'],
        envMap: _0x424ax29,
        specular: 0xffffff
    });
    var _0x424ax35 = new THREE.MeshPhongMaterial({
        color: 0xffffff,
        reflectivity: 1,
        combine: THREE['MixOperation'],
        envMap: _0x424ax29,
        opacity: 0.4,
        transparent: true,
        specular: 0xcccccc
    });
    var _0x424ax36 = new THREE.MeshLambertMaterial({
        color: 0x333333,
        reflectivity: 0.5,
        combine: THREE['MixOperation'],
        envMap: _0x424ax29
    });
    c01 = new THREE.Object3D();
    cc('m_01/f_01/c_01/b01.js', 'm_01/f_01/c_01/g01.js', 'm_01/f_01/c_01/br01.js', 'm_01/f_01/c_01/r01.js', 'm_01/f_01/c_01/w01.js', 'm_01/f_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
        map: THREE['ImageUtils']['loadTexture'](path + 't_01/f_01/c_01/i01.jpg')
    }), new THREE.MeshBasicMaterial({
        map: THREE['ImageUtils']['loadTexture'](path + 't_01/f_01/c_01/s01.png'),
        transparent: true
    }), c01);
    // c02 = new THREE.Object3D();
    // cc('m_01/mi_01/c_01/b01.js', 'm_01/mi_01/c_01/g01.js', 'm_01/mi_01/c_01/br01.js', 'm_01/mi_01/c_01/r01.js', 'm_01/mi_01/c_01/w01.js', 'm_01/mi_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/mi_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/mi_01/c_01/s01.png'),
    //     transparent: true
    // }), c02);
    // c03 = new THREE.Object3D();
    // cc('m_01/a_01/c_01/b01.js', 'm_01/a_01/c_01/g01.js', 'm_01/a_01/c_01/br01.js', 'm_01/a_01/c_01/r01.js', 'm_01/a_01/c_01/w01.js', 'm_01/a_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/a_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/a_01/c_01/s01.png'),
    //     transparent: true
    // }), c03);
    // c04 = new THREE.Object3D();
    // cc('m_01/ma_01/c_01/b01.js', 'm_01/ma_01/c_01/g01.js', 'm_01/ma_01/c_01/br01.js', 'm_01/ma_01/c_01/r01.js', 'm_01/ma_01/c_01/w01.js', 'm_01/ma_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/ma_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/ma_01/c_01/s01.png'),
    //     transparent: true
    // }), c04);
    // c05 = new THREE.Object3D();
    // cc('m_01/ch_01/c_01/b01.js', 'm_01/ch_01/c_01/g01.js', 'm_01/ch_01/c_01/br01.js', 'm_01/ch_01/c_01/r01.js', 'm_01/ch_01/c_01/w01.js', 'm_01/ch_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/ch_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/ch_01/c_01/s01.png'),
    //     transparent: true
    // }), c05);
    // c06 = new THREE.Object3D();
    // cc('m_01/me_01/c_01/b01.js', 'm_01/me_01/c_01/g01.js', 'm_01/me_01/c_01/br01.js', 'm_01/me_01/c_01/r01.js', 'm_01/me_01/c_01/w01.js', 'm_01/me_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/me_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/me_01/c_01/s01.png'),
    //     transparent: true
    // }), c06);
    // c07 = new THREE.Object3D();
    // cc('m_01/n_01/c_01/b01.js', 'm_01/n_01/c_01/g01.js', 'm_01/n_01/c_01/br01.js', 'm_01/n_01/c_01/r01.js', 'm_01/n_01/c_01/w01.js', 'm_01/n_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/n_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/n_01/c_01/s01.png'),
    //     transparent: true
    // }), c07);
    // c08 = new THREE.Object3D();
    // cc('m_01/am_01/c_01/b01.js', 'm_01/am_01/c_01/g01.js', 'm_01/am_01/c_01/br01.js', 'm_01/am_01/c_01/r01.js', 'm_01/am_01/c_01/w01.js', 'm_01/am_01/c_01/i01.js', bm, _0x424ax35, _0x424ax36, rm, _0x424ax34, new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/am_01/c_01/i01.jpg')
    // }), new THREE.MeshBasicMaterial({
    //     map: THREE['ImageUtils']['loadTexture'](path + 't_01/am_01/c_01/s01.png'),
    //     transparent: true
    // }), c08);
    rr = new THREE.WebGLRenderer({
        antialias: true
    });
    rr['setSize'](window['innerWidth'], window['innerHeight']);
    rr['setClearColorHex'](0x000000, 1);
    rr['clear']();
    rr['sortObjects'] = false;
    vp['appendChild'](rr['domElement']);
    vp['addEventListener']('mousemove', mouseMove, false);
    vp['addEventListener']('mousedown', mouseDown, false);
    vp['addEventListener']('mouseup', mouseUp, false);
    vp['addEventListener']('mousewheel', mouseWheel, false);
    vp['addEventListener']('DOMMouseScroll', mouseWheelDOM, false);
    window['addEventListener']('resize', resize, false);
    window['addEventListener']('contextmenu', contextMenu, false);
    window['addEventListener']('keyup', keyboard, false);
    vp['appendChild'](stats['domElement']);
    console['log']('Press S key to preview stats if needed!');
    render();
};

function lm(_0x424ax2d, _0x424ax38, _0x424ax39) {
    var _0x424ax3a = new THREE.Mesh(_0x424ax2d, _0x424ax38);
    _0x424ax3a['scale']['set'](0.3, 0.3, 0.3);
    _0x424ax3a['position']['y'] = -15;
    _0x424ax39['add'](_0x424ax3a);
};

function cc(_0x424ax3c, _0x424ax3d, _0x424ax3e, _0x424ax3f, _0x424ax40, _0x424ax41, _0x424ax42, _0x424ax43, _0x424ax44, _0x424ax45, _0x424ax46, _0x424ax47, _0x424ax48, _0x424ax39) {
    var _0x424ax49 = new THREE.JSONLoader();
    _0x424ax49['load'](_0x424ax3c, function (_0x424ax2d) {
        lm(_0x424ax2d, _0x424ax42, _0x424ax39);
    });
    _0x424ax49['load'](_0x424ax3d, function (_0x424ax2d) {
        lm(_0x424ax2d, _0x424ax43, _0x424ax39);
    });
    _0x424ax49['load'](_0x424ax3e, function (_0x424ax2d) {
        lm(_0x424ax2d, _0x424ax44, _0x424ax39);
    });
    _0x424ax49['load'](_0x424ax3f, function (_0x424ax2d) {
        lm(_0x424ax2d, _0x424ax45, _0x424ax39);
    });
    _0x424ax49['load'](_0x424ax40, function (_0x424ax2d) {
        lm(_0x424ax2d, _0x424ax46, _0x424ax39);
    });
    _0x424ax49['load'](_0x424ax41, function (_0x424ax2d) {
        lm(_0x424ax2d, _0x424ax47, _0x424ax39);
    });
    var _0x424ax4a = new THREE.Mesh(new THREE.PlaneGeometry(350, 350, 1, 1), _0x424ax48);
    _0x424ax4a['rotation']['x'] = -Math['PI'] / 2;
    _0x424ax4a['position']['y'] = -15;
    _0x424ax39['add'](_0x424ax4a);
    _0x424ax39['rotation']['y'] = (Math['PI'] / 4) * 45;
    s['add'](_0x424ax39);
};

function cv(_0x424ax4c, _0x424ax4d) {
    switch (_0x424ax4d) {
        case true:
            _0x424ax4c['traverse'](function (_0x424ax4e) {
                _0x424ax4e['visible'] = true;
            });
            break;;
        case false:
            _0x424ax4c['traverse'](function (_0x424ax4e) {
                _0x424ax4e['visible'] = false;
            });
            break;;
    };
};

function contextMenu(_0x424ax50) {
    _0x424ax50['preventDefault']();
};

function keyboard(_0x424ax50) {
    switch (_0x424ax50['keyCode']) {
        case 83:
            isStats = !isStats;
            break;;
    };
};

function mouseDown(_0x424ax50) {
    _0x424ax50['preventDefault']();
    ism = true;
    mdx = _0x424ax50['clientX'];
    mdy = _0x424ax50['clientY'];
};

function mouseMove(_0x424ax50) {
    _0x424ax50['preventDefault']();
    cmx = _0x424ax50['clientX'];
    cmy = _0x424ax50['clientY'];
};

function mouseUp(_0x424ax50) {
    _0x424ax50['preventDefault']();
    ism = false;
};

function mouseWheel(_0x424ax50) {
    _0x424ax50['preventDefault']();
    cam_d -= _0x424ax50['wheelDeltaY'] * 0.005;
    if (cam_d < 200) {
        cam_d = 200;
    };
    if (cam_d > 290) {
        cam_d = 290;
    };
};

function mouseWheelDOM(_0x424ax50) {
    _0x424ax50['preventDefault']();
    cam_d += _0x424ax50['detail'] * 0.4;
    if (cam_d < 200) {
        cam_d = 200;
    };
    if (cam_d > 290) {
        cam_d = 290;
    };
};

function resize(_0x424ax50) {
    _0x424ax50['preventDefault']();
    cam['aspect'] = window['innerWidth'] / window['innerHeight'];
    cam['updateProjectionMatrix']();
    rr['setSize'](window['innerWidth'], window['innerHeight']);
};

function replaceCarByIndex(_0x424ax59) {
    index = _0x424ax59;
};

function toggleFullscreen() {
    this['webkitFullscreenSupport'] = 'webkitCancelFullScreen' in document ? true : false;
    this['mozFullscreenSupport'] = 'mozCancelFullScreen' in document ? true : false;
    if (!fullscreen) {
        if (this['webkitFullscreenSupport']) {
            fullscreen = true;
            document['body']['webkitRequestFullScreen']();
        } else {
            if (this['mozFullscreenSupport']) {
                fullscreen = true;
                document['body']['mozRequestFullScreen']();
            } else {
                fullscreen = false;
                alert('To see it in fullscreen mode please use Chrome, Firefox or Safari.\x0A\x0AThe browser in use has no stable fullscreen mode or doesn\'t support it yet.\x0A\x0ASorry for the inconvenience.');
            };
        };
    } else {
        fullscreen = false;
        if (this['webkitFullscreenSupport']) {
            document['webkitCancelFullScreen']();
        } else {
            document['mozCancelFullScreen']();
        };
    };
};

function orbitController(_0x424ax5c) {
    switch (cam_t) {
        case 'auto':
            if (ism) {
                if (Math['abs'](mdx - cmx) >= 1) {
                    dy = (mdx - cmx) / 6;
                };
                dp = (mdy - cmy) / 6;
            } else {
                if (cam_p < 89 && dirY == 'down') {
                    cam_p += 0.02;
                } else {
                    if (cam_p > 88 && dirY == 'down') {
                        dirY = 'up';
                    } else {
                        if (cam_p > 57 && dirY == 'up') {
                            cam_p -= 0.02;
                        } else {
                            if (cam_p < 58 && dirY == 'up') {
                                dirY = 'down';
                            };
                        };
                    };
                };
                cam_y -= 0.1;
            };
            cam_p += dp;
            cam_y -= dy;
            if (cam_p >= 90) {
                cam_p = 89.9;
            } else {
                if (cam_p <= 56) {
                    cam_p = 56.1;
                };
            };
            dy *= 0.7;
            dp *= 0.7;
            break;;
        case 'free':
            if (ism) {
                if (Math['abs'](mdx - cmx) >= 1) {
                    dy = (mdx - cmx) / 6;
                };
                dp = (mdy - cmy) / 6;
            };
            cam_p += dp;
            cam_y -= dy;
            if (cam_p >= 90) {
                cam_p = 89.9;
            } else {
                if (cam_p <= 56) {
                    cam_p = 56.1;
                };
            };
            dy *= 0.7;
            dp *= 0.7;
            break;;
    };
    _0x424ax5c['position']['y'] = (cam_d) * Math['cos'](cam_p * Math['PI'] / 180);
    _0x424ax5c['position']['x'] = (cam_d) * Math['sin'](cam_p * Math['PI'] / 180) * Math['cos'](cam_y * Math['PI'] / 180);
    _0x424ax5c['position']['z'] = (cam_d) * Math['sin'](cam_p * Math['PI'] / 180) * Math['sin'](cam_y * Math['PI'] / 180);
    _0x424ax5c['lookAt']({
        x: 0,
        y: 0,
        z: 0
    });
    mdx = cmx;
    mdy = cmy;
};

function render() {
    requestAnimationFrame(render);
    orbitController(cam);
    cl['position']['set'](cam['position']['x'], cam['position']['y'], cam['position']['z']);
    switch (index) {
        case 0:
            cv(c01, true);
            // cv(c02, false);
            // cv(c03, false);
            // cv(c04, false);
            // cv(c05, false);
            // cv(c06, false);
            // cv(c07, false);
            // cv(c08, false);
            break;;
        // case 1:
        //     cv(c01, false);
        //     cv(c02, true);
        //     cv(c03, false);
        //     cv(c04, false);
        //     cv(c05, false);
        //     cv(c06, false);
        //     cv(c07, false);
        //     cv(c08, false);
        //     break;;
        // case 2:
        //     cv(c01, false);
        //     cv(c02, false);
        //     cv(c03, true);
        //     cv(c04, false);
        //     cv(c05, false);
        //     cv(c06, false);
        //     cv(c07, false);
        //     cv(c08, false);
        //     break;;
        // case 3:
        //     cv(c01, false);
        //     cv(c02, false);
        //     cv(c03, false);
        //     cv(c04, true);
        //     cv(c05, false);
        //     cv(c06, false);
        //     cv(c07, false);
        //     cv(c08, false);
        //     break;;
        // case 4:
        //     cv(c01, false);
        //     cv(c02, false);
        //     cv(c03, false);
        //     cv(c04, false);
        //     cv(c05, true);
        //     cv(c06, false);
        //     cv(c07, false);
        //     cv(c08, false);
        //     break;;
        // case 5:
        //     cv(c01, false);
        //     cv(c02, false);
        //     cv(c03, false);
        //     cv(c04, false);
        //     cv(c05, false);
        //     cv(c06, true);
        //     cv(c07, false);
        //     cv(c08, false);
        //     break;;
        // case 6:
        //     cv(c01, false);
        //     cv(c02, false);
        //     cv(c03, false);
        //     cv(c04, false);
        //     cv(c05, false);
        //     cv(c06, false);
        //     cv(c07, true);
        //     cv(c08, false);
        //     break;;
        // case 7:
        //     cv(c01, false);
        //     cv(c02, false);
        //     cv(c03, false);
        //     cv(c04, false);
        //     cv(c05, false);
        //     cv(c06, false);
        //     cv(c07, false);
        //     cv(c08, true);
        //     break;;
    };
    if (isStats) {
        stats['update']();
        stats['domElement']['style']['visibility'] = 'visible';
    } else {
        stats['domElement']['style']['visibility'] = 'hidden';
    };
    rr['render'](s, cam);
};

function selectCamera(_0x424ax59) {
    cam_t = _0x424ax59;
};
// var picker = new Image();
// picker['src'] = 'gui/spectrumBitmap.jpg';
// picker['onload'] = function () {
//     var _0x424ax60 = document['getElementById']('body-picker-canvas');
//     var _0x424ax61 = document['getElementById']('rims-picker-canvas');
//     _0x424ax60['width'] = _0x424ax61['width'] = 264;
//     _0x424ax60['height'] = _0x424ax61['height'] = 86;
//     _0x424ax60['addEventListener']('mousemove', pm, false);
//     _0x424ax61['addEventListener']('mousemove', pm, false);
//     _0x424ax60['addEventListener']('mouseup', bpd, false);
//     _0x424ax61['addEventListener']('mouseup', rpd, false);
//     var _0x424ax62 = _0x424ax60['getContext']('2d');
//     _0x424ax62['drawImage'](picker, 0, 0);
//     var _0x424ax63 = _0x424ax61['getContext']('2d');
//     _0x424ax63['drawImage'](picker, 0, 0);
// };

function gcp(_0x424ax4e) {
    var _0x424ax65 = 0,
        _0x424ax66 = 0;
    if (_0x424ax4e['offsetParent']) {
        do {
            _0x424ax65 += _0x424ax4e['offsetLeft'];
            _0x424ax66 += _0x424ax4e['offsetTop'];
        } while (_0x424ax4e = _0x424ax4e['offsetParent']);;
        return {
            x: _0x424ax65,
            y: _0x424ax66
        };
    };
    return undefined;
};

function rgbToHex(_0x424ax27, _0x424ax68, _0x424ax69) {
    if (_0x424ax27 > 255 || _0x424ax68 > 255 || _0x424ax69 > 255) {
        throw 'Invalid color component';
    };
    return ((_0x424ax27 << 16) | (_0x424ax68 << 8) | _0x424ax69).toString(16);
};
var hex;

function pm(_0x424ax50) {
    var _0x424ax6c = gcp(this);
    var _0x424ax6d = _0x424ax50['pageX'] - _0x424ax6c['x'];
    var _0x424ax6e = _0x424ax50['pageY'] - _0x424ax6c['y'];
    var _0x424ax6f = 'x=' + _0x424ax6d + ', y=' + _0x424ax6e;
    var _0x424ax70 = this['getContext']('2d');
    var _0x424ax71 = _0x424ax70['getImageData'](_0x424ax6d, _0x424ax6e, 1, 1)['data'];
    hex = '0x' + ('000000' + rgbToHex(_0x424ax71[0], _0x424ax71[1], _0x424ax71[2]))['slice'](-6);
};

function bpd(_0x424ax50) {
    bc = hex;
    bm['color']['setHex'](bc);
};

function rpd(_0x424ax50) {
    rc = hex;
    rm['color']['setHex'](rc);
};